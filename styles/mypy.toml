["setup.cfg".mypy]
# mypy configurations: http://bit.ly/2zEl9WI

# Plugins, includes custom:
plugins = returns.contrib.mypy.decorator_plugin, pydantic.mypy

# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true

### Untyped definitions and calls

# Disallows calling functions without type annotations from functions with type annotations (default False)
disallow_untyped_calls = False

# Disallows defining functions without type annotations or with incomplete type annotations (default False)
disallow_untyped_defs = True

# Disallows defining functions with incomplete type annotations (default False)
disallow_incomplete_defs = True

# Type-checks the interior of functions without type annotations (default False)
check_untyped_defs = True

# Reports an error whenever a function with type annotations is decorated
# with a decorator without annotations (default False)
disallow_untyped_decorators = False

### None and Optional handling
# Enables or disables strict Optional checks. If False, mypy treats None as compatible with every type.
strict_optional = True

# Changes the treatment of arguments with a default value of `None` by not implicitly making their type `Optional`.
no_implicit_optional = True

### Configuring warnings
# Warns about casting an expression to its inferred type.
warn_redundant_casts = True

# Warns about unneeded # type: ignore comments.
warn_unused_ignores = True

# Shows errors for missing return statements on some execution paths.
warn_no_return = True

# Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
warn_return_any = True

# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = True

# Warns about per-module sections in the config file that do not match any files processed when invoking mypy.
warn_unused_configs = true

### Suppressing errors
# Ignores all non-fatal errors.
ignore_errors = False

# Shows errors related to strict `None` checking, if the global `strict_optional` flag is enabled.
show_none_errors = True


### Miscellaneous strictness flags
# Causes mypy to suppress errors caused by not being able to fully infer the types of global and class variables.
allow_untyped_globals = False

# Allows variables to be redefined with an arbitrary type, as long as the redefinition is in the same block and nesting level as the original definition.
allow_redefinition = False

# By default, imported values to a module are treated as exported and mypy allows other modules to import them.
# When false, mypy will not re-export unless the item is imported using from-as or is included in __all__
implicit_reexport = False

# Prohibit equality checks, identity checks, and container checks between non-overlapping types.
strict_equality = True

### Configuring error messages
# Shows error messages with color enabled.
color_output = True

# Shows a short summary line after error messages.
error_summary = False

# Prefixes each error with the relevant context.
show_error_context = False

# Shows column numbers in error messages.
show_column_numbers = True

# Shows error codes in error messages.
show_error_codes = True

# Use visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers.
pretty = False

### Incremental mode
# Enables incremental mode.
incremental = False

# Specifies the location where mypy stores incremental cache info.
# User home directory and environment variables will be expanded. This setting will be overridden by the MYPY_CACHE_DIR environment variable.
cache_dir = .cache/mypy/

# Use an SQLite database to store the cache.
sqlite_cache = True

[pydantic-mypy]
init_forbid_extra = True
init_typed = True
warn_required_dynamic_aliases = True
warn_untyped_fields = True
